map "http://worldhealthorganization.github.io/ddcc/StructureMap/CertDCCtoCoreDataSet" = "CertDCCtoCoreDataSet"

uses "http://worldhealthorganization.github.io/ddcc/StructureDefinition/CertDCC" alias CWTPayload as source

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias DDCCBundle as target
uses "http://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCCoreDataSet" alias DDCC as produced
uses "http://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCCoreDataSet.VS" alias DDCCVS as produced
uses "http://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCCoreDataSet.TR" alias DDCCTR as produced

group CertDCCtoCoreDataSet(
    source src: CWTPayload, 
    target ddccBundle: DDCCBundle)
{
    src.hcert as hcert then {
        hcert.eu_DCC_v1 as dcc then {
            dcc.v as v -> ddccBundle.entry as outentry,  create('http://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCCoreDataSet.VS') as ddcc then {                
                v then DCCtoCoreDataSet(dcc, ddcc) "set DDCC";
                v -> ddcc.certificate as certificate then CertDCCtoCoreDataSetCertificate(src, dcc, v, certificate) "set certificate";
                v -> ddcc.vaccination as vaccination then VtoCoreDataSetVS(v, vaccination) "set vaccination";
                v -> outentry.resource = ddcc "set outentry";  
            } "v";
            dcc.t as t -> ddccBundle.entry as outentry,  create('http://worldhealthorganization.github.io/ddcc/StructureDefinition/DDCCCoreDataSet.TR') as ddcc then {
                t then DCCtoCoreDataSet(dcc, ddcc) "set DDCC";
                t -> ddcc.certificate as certificate then CertDCCtoCoreDataSetCertificate(src, dcc, t, certificate) "set certificate";
                t -> ddcc.test as test then TtoCoreDataSetTR(t, test) "set test";
                t -> outentry.resource = ddcc "set outentry";  
            } "t";            
        } "eu_DCC_v1";
    } "hcert";
}

group DCCtoCoreDataSet(
    source dcc,
    target ddcc: DDCC)
{
    dcc.dob as birthDate -> ddcc.birthDate = birthDate "set birthDate";
    dcc.nam as nam then {
        nam.gn as given -> ddcc.name = (given.replaceMatches('$', ' ')) "set given name";                
        nam.fn as family -> ddcc.name as tName, ddcc.name = append( tName, family ) "add family name";
    } "nam";
}

group CertDCCtoCoreDataSetCertificate(
    source src: CWTPayload,
    source dcc,
    source g,
    target certificate)
{
    src -> certificate.period = create('Period') as period then CwtToPeriod(src, period) "set period";    
    dcc.ver as ver -> certificate.version = ver "set version";
    g.ci as ci -> certificate.hcid as hcid,
        hcid.value = ci "set hcid";
    g.is as is -> 
        certificate.issuer = create('Reference') as issuer,
        issuer.display = is "set issuer";
}

group CwtToPeriod(source src: CWTPayload, target tgt : Period) {
    src.iat as iat ->
        append(iat, " seconds") as epoch,
        tgt.start = (@1970-01-01T00:00:00.000+00:00 + epoch.toQuantity())
        "set period start";
    src.exp as exp ->
        append(exp, " seconds") as epoch,
        tgt.end = (@1970-01-01T00:00:00.000+00:00 + epoch.toQuantity())
        "set period end";
}

group VtoCoreDataSetVS(
    source v, 
    target vaccination)
{
    v.tg as tg -> 
        vaccination.disease as coding,
        coding.system = "http://snomed.info/sct", 
        coding.code = tg
        "set target disease";
    v.vp as vp -> 
        vaccination.vaccine as coding,
        coding.system = "https://id.uvci.eu/valuesets/vaccine-prophylaxis.json",
        coding.code = vp
        "set vaccine";    
    v.mp as mp -> vaccination.brand = translate(mp, 'http://worldhealthorganization.github.io/ddcc/ConceptMap/who-ddcc-map-eudcc-icd11-vaccines', 'Coding') "translate mp to brand";    
    v.ma as ma -> vaccination.maholder as coding,
        coding.system = "https://id.uvci.eu/valuesets/vaccine-mah-manf.json",
        coding.code = ma "set maholder";
    v.dt as date -> vaccination.date = date "set date";
    v.dn as dose -> vaccination.dose = dose "set dose";
    v.sd as totalDoses -> vaccination.totalDoses = totalDoses "set totalDoses";
    v.co as co -> 
        vaccination.country as coding,
        coding.code = co,
        coding.system = "urn:iso:std:iso:3166"
        "set country";
}

group TtoCoreDataSetTR(
    source t, 
    target test)
{
    t.tg as tg -> 
        test.pathogen as coding,
        coding.system = "http://snomed.info/sct", 
        coding.code = tg
        "set pathogen";
    t.tt as tt -> test.type as coding,
        coding.system = "http://loinc.org",
        coding.code = tt "set type";           
    t.nm as nm -> test.brand as coding,
        coding.system = "https://id.uvci.eu/valuesets/test-manf.json",
        coding.code = nm "set brand";           
    t.ma as ma -> test.manufacturer as coding,
        coding.system = "https://covid-19-diagnostics.jrc.ec.europa.eu/devices",
        coding.code = ma "set manufacturer";         
    t.sc as date -> test.date = date "set date";  
    t.tr as tr -> 
        test.result as coding,
        coding.system = "http://snomed.info/sct",
        coding.code = tr
        "set result";     
    t.tc as tc -> 
        test.centre as coding,
        coding.code = tc
        "set centre";           
    t.co as co -> 
        test.country as coding,
        coding.code = co,
        coding.system = "urn:iso:std:iso:3166"
        "set country";        
}